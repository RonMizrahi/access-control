services:
  # Spring Boot Application
  app:
    build: .
    image: spring-template:latest
    container_name: spring-template-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-default}
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL:-jdbc:h2:mem:testdb}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME:-sa}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD:-password}
      - SPRING_DATA_REDIS_HOST=${SPRING_DATA_REDIS_HOST:-redis}
      - SPRING_DATA_REDIS_PORT=${SPRING_DATA_REDIS_PORT:-6379}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${SPRING_KAFKA_BOOTSTRAP_SERVERS:-kafka:9092}
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=${MANAGEMENT_ZIPKIN_TRACING_ENDPOINT:-http://zipkin:9411/api/v2/spans}
    depends_on:
      - zipkin
    profiles:
      - minimal
      - full
    networks:
      - spring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (alternative to H2)
  postgres:
    image: postgres:16-alpine
    container_name: spring-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-springdb}
      POSTGRES_USER: ${POSTGRES_USER:-spring}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-spring123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    profiles:
      - full
      - postgres
    networks:
      - spring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-spring} -d ${POSTGRES_DB:-springdb}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: spring-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    profiles:
      - full
      - cache
    networks:
      - spring-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache Kafka

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: spring-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      CLUSTER_ID: 01234567-89ab-cdef-0123-456789abcdef
    profiles:
      - full
      - messaging
    networks:
      - spring-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Zipkin for Distributed Tracing
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: spring-zipkin
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=mem
    profiles:
      - minimal
      - full
      - tracing
    networks:
      - spring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9411/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Commander (GUI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: spring-redis-gui
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    profiles:
      - full
      - gui
    networks:
      - spring-network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: spring-kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    ports:
      - "8082:8080"
    depends_on:
      - kafka
    profiles:
      - full
      - gui
    networks:
      - spring-network

  # Adminer (Database GUI)
  adminer:
    image: adminer:latest
    container_name: spring-adminer
    ports:
      - "8083:8080"
    depends_on:
      - postgres
    profiles:
      - full
      - postgres
      - gui
    networks:
      - spring-network

volumes:
  postgres_data:
  redis_data:

networks:
  spring-network:
    driver: bridge
